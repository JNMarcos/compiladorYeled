
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 01 17:33:36 GFT 2016
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.*;
import java.util.*;
import compiler.tree.*;
import compiler.tree.expressao.*;
import compiler.tree.comando.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 01 17:33:36 GFT 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\004\005" +
    "\000\002\005\004\000\002\006\005\000\002\006\002\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\004\000\002\011\007\000\002\011\007\000\002\012" +
    "\006\000\002\012\002\000\002\013\006\000\002\013\002" +
    "\000\002\014\005\000\002\015\004\000\002\015\002\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\006\000\002\020\007" +
    "\000\002\021\010\000\002\021\006\000\002\022\007\000" +
    "\002\023\004\000\002\024\005\000\002\025\006\000\002" +
    "\026\004\000\002\026\002\000\002\027\005\000\002\027" +
    "\002\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\003\000\002\031\005\000\002\031\004" +
    "\000\002\031\004\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\014\002\uffff\043\uffff\044\uffff\045\uffff\047" +
    "\uffff\001\002\000\014\002\010\043\006\044\014\045\013" +
    "\047\007\001\002\000\014\002\ufffe\043\ufffe\044\ufffe\045" +
    "\ufffe\047\ufffe\001\002\000\006\004\ufff8\025\ufff8\001\002" +
    "\000\004\004\166\001\002\000\004\002\000\001\002\000" +
    "\014\002\001\043\001\044\001\045\001\047\001\001\002" +
    "\000\004\026\041\001\002\000\006\004\ufff7\025\ufff7\001" +
    "\002\000\006\004\ufff6\025\ufff6\001\002\000\014\002\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\047\ufffd\001\002\000\004\004" +
    "\017\001\002\000\010\024\022\030\023\031\ufff9\001\002" +
    "\000\004\031\021\001\002\000\034\002\ufffc\004\ufffc\026" +
    "\ufffc\027\ufffc\036\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\047\ufffc\001\002\000\010\004" +
    "\uffef\025\ufff1\030\uffef\001\002\000\004\004\025\001\002" +
    "\000\004\031\ufffb\001\002\000\006\030\023\031\ufff9\001" +
    "\002\000\004\031\ufffa\001\002\000\004\025\037\001\002" +
    "\000\006\004\031\030\032\001\002\000\004\032\035\001" +
    "\002\000\004\004\033\001\002\000\004\032\034\001\002" +
    "\000\006\004\ufff0\030\ufff0\001\002\000\010\043\006\044" +
    "\014\045\013\001\002\000\004\025\ufff2\001\002\000\004" +
    "\026\ufff4\001\002\000\014\002\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\047\ufff5\001\002\000\026\004\uffec\026\uffec\027\uffec" +
    "\036\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046" +
    "\uffec\001\002\000\026\004\056\026\041\027\062\036\057" +
    "\041\061\042\053\043\006\044\014\045\013\046\055\001" +
    "\002\000\030\004\uffe4\026\uffe4\027\uffe4\036\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\001" +
    "\002\000\004\004\165\001\002\000\030\004\uffe7\026\uffe7" +
    "\027\uffe7\036\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\001\002\000\030\004\uffe5\026\uffe5" +
    "\027\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\001\002\000\004\031\164\001\002" +
    "\000\030\004\uffea\026\uffea\027\uffea\036\uffea\040\uffea\041" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\001\002" +
    "\000\030\004\uffe8\026\uffe8\027\uffe8\036\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\001\002" +
    "\000\030\004\uffe9\026\uffe9\027\uffe9\036\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\001\002" +
    "\000\020\004\075\014\065\022\074\024\071\033\067\034" +
    "\072\035\073\001\002\000\030\004\uffe6\026\uffe6\027\uffe6" +
    "\036\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\001\002\000\004\024\156\001\002\000\006" +
    "\023\153\024\077\001\002\000\020\004\075\014\065\022" +
    "\074\024\071\033\067\034\072\035\073\001\002\000\030" +
    "\004\uffeb\026\uffeb\027\uffeb\036\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\001\002\000\004" +
    "\024\064\001\002\000\034\002\uffee\004\uffee\026\uffee\027" +
    "\uffee\036\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\047\uffee\001\002\000\026\004\uffed\026" +
    "\uffed\027\uffed\036\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\001\002\000\020\004\075\014\065\022" +
    "\074\024\071\033\067\034\072\035\073\001\002\000\020" +
    "\004\075\014\065\022\074\024\071\033\067\034\072\035" +
    "\073\001\002\000\044\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\025\uffca\030\uffca\031\uffca\037\uffca" +
    "\001\002\000\044\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\025\uffc6\030\uffc6\031\uffc6\037\uffc6\001" +
    "\002\000\036\005\112\006\116\007\111\010\110\011\104" +
    "\012\115\013\102\014\103\015\107\016\106\017\105\020" +
    "\117\021\114\025\143\001\002\000\020\004\075\014\065" +
    "\022\074\024\071\033\067\034\072\035\073\001\002\000" +
    "\044\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\025\uffc4\030\uffc4\031\uffc4\037\uffc4\001\002\000\044" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\025\uffc5\030\uffc5\031\uffc5\037\uffc5\001\002\000\020\004" +
    "\075\014\065\022\074\024\071\033\067\034\072\035\073" +
    "\001\002\000\046\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\024\077\025\uffc3\030\uffc3\031\uffc3\037" +
    "\uffc3\001\002\000\044\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\025\uffc2\030\uffc2\031\uffc2\037\uffc2" +
    "\001\002\000\022\004\075\014\065\022\074\024\071\025" +
    "\uffda\033\067\034\072\035\073\001\002\000\004\025\137" +
    "\001\002\000\040\005\112\006\116\007\111\010\110\011" +
    "\104\012\115\013\102\014\103\015\107\016\106\017\105" +
    "\020\117\021\114\025\uffd8\030\uffd8\001\002\000\020\004" +
    "\075\014\065\022\074\024\071\033\067\034\072\035\073" +
    "\001\002\000\020\004\075\014\065\022\074\024\071\033" +
    "\067\034\072\035\073\001\002\000\020\004\075\014\065" +
    "\022\074\024\071\033\067\034\072\035\073\001\002\000" +
    "\020\004\075\014\065\022\074\024\071\033\067\034\072" +
    "\035\073\001\002\000\020\004\075\014\065\022\074\024" +
    "\071\033\067\034\072\035\073\001\002\000\020\004\075" +
    "\014\065\022\074\024\071\033\067\034\072\035\073\001" +
    "\002\000\020\004\075\014\065\022\074\024\071\033\067" +
    "\034\072\035\073\001\002\000\020\004\075\014\065\022" +
    "\074\024\071\033\067\034\072\035\073\001\002\000\020" +
    "\004\075\014\065\022\074\024\071\033\067\034\072\035" +
    "\073\001\002\000\006\025\uffdb\030\124\001\002\000\020" +
    "\004\075\014\065\022\074\024\071\033\067\034\072\035" +
    "\073\001\002\000\020\004\075\014\065\022\074\024\071" +
    "\033\067\034\072\035\073\001\002\000\020\004\075\014" +
    "\065\022\074\024\071\033\067\034\072\035\073\001\002" +
    "\000\020\004\075\014\065\022\074\024\071\033\067\034" +
    "\072\035\073\001\002\000\044\005\112\006\116\007\111" +
    "\010\110\011\104\012\115\013\102\014\103\015\107\016" +
    "\106\017\105\020\uffd2\021\uffd2\025\uffd2\030\uffd2\031\uffd2" +
    "\037\uffd2\001\002\000\044\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\013\102\014\103\015\107\016\106" +
    "\017\105\020\uffcf\021\uffcf\025\uffcf\030\uffcf\031\uffcf\037" +
    "\uffcf\001\002\000\044\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\013\102\014\103\015\107\016\106\017" +
    "\105\020\uffcd\021\uffcd\025\uffcd\030\uffcd\031\uffcd\037\uffcd" +
    "\001\002\000\044\005\112\006\116\007\111\010\110\011" +
    "\104\012\115\013\102\014\103\015\107\016\106\017\105" +
    "\020\uffd1\021\uffd1\025\uffd1\030\uffd1\031\uffd1\037\uffd1\001" +
    "\002\000\020\004\075\014\065\022\074\024\071\033\067" +
    "\034\072\035\073\001\002\000\040\005\112\006\116\007" +
    "\111\010\110\011\104\012\115\013\102\014\103\015\107" +
    "\016\106\017\105\020\117\021\114\025\uffd9\030\uffd9\001" +
    "\002\000\044\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\102\014\103\015\107\016\106\017\105\020" +
    "\uffd0\021\uffd0\025\uffd0\030\uffd0\031\uffd0\037\uffd0\001\002" +
    "\000\044\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\102\014\103\015\107\016\106\017\105\020\uffcb" +
    "\021\uffcb\025\uffcb\030\uffcb\031\uffcb\037\uffcb\001\002\000" +
    "\044\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\102\014\103\015\107\016\106\017\105\020\uffce\021" +
    "\uffce\025\uffce\030\uffce\031\uffce\037\uffce\001\002\000\044" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\025\uffd5\030\uffd5\031\uffd5\037\uffd5\001\002\000\044\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\025" +
    "\uffd4\030\uffd4\031\uffd4\037\uffd4\001\002\000\044\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\025\uffd3" +
    "\030\uffd3\031\uffd3\037\uffd3\001\002\000\044\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\102\014\103" +
    "\015\107\016\106\017\105\020\uffcc\021\uffcc\025\uffcc\030" +
    "\uffcc\031\uffcc\037\uffcc\001\002\000\044\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\107\016\106\017\105\020\uffd6\021\uffd6\025\uffd6\030\uffd6" +
    "\031\uffd6\037\uffd6\001\002\000\044\005\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\107" +
    "\016\106\017\105\020\uffd7\021\uffd7\025\uffd7\030\uffd7\031" +
    "\uffd7\037\uffd7\001\002\000\044\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\025\uffdc\030\uffdc\031\uffdc" +
    "\037\uffdc\001\002\000\044\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\025\uffc8\030\uffc8\031\uffc8\037" +
    "\uffc8\001\002\000\036\005\112\006\116\007\111\010\110" +
    "\011\104\012\115\013\102\014\103\015\107\016\106\017" +
    "\105\020\117\021\114\025\142\001\002\000\044\005\uffc9" +
    "\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\025\uffc9" +
    "\030\uffc9\031\uffc9\037\uffc9\001\002\000\024\004\056\026" +
    "\041\036\057\041\061\042\053\043\006\044\014\045\013" +
    "\046\055\001\002\000\030\004\uffe2\026\uffe2\027\uffe2\036" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\001\002\000\044\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\025\uffc7\030\uffc7\031\uffc7\037" +
    "\uffc7\001\002\000\036\005\112\006\116\007\111\010\110" +
    "\011\104\012\115\013\102\014\103\015\107\016\106\017" +
    "\105\020\117\021\114\037\147\001\002\000\024\004\056" +
    "\026\041\036\057\041\061\042\053\043\006\044\014\045" +
    "\013\046\055\001\002\000\030\004\uffe0\026\uffe0\027\uffe0" +
    "\036\uffe0\040\151\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\001\002\000\024\004\056\026\041\036\057" +
    "\041\061\042\053\043\006\044\014\045\013\046\055\001" +
    "\002\000\030\004\uffe1\026\uffe1\027\uffe1\036\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\001" +
    "\002\000\020\004\075\014\065\022\074\024\071\033\067" +
    "\034\072\035\073\001\002\000\036\005\112\006\116\007" +
    "\111\010\110\011\104\012\115\013\102\014\103\015\107" +
    "\016\106\017\105\020\117\021\114\031\155\001\002\000" +
    "\030\004\uffe3\026\uffe3\027\uffe3\036\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\001\002\000" +
    "\022\004\075\014\065\022\074\024\071\025\uffda\033\067" +
    "\034\072\035\073\001\002\000\004\025\160\001\002\000" +
    "\004\031\161\001\002\000\030\004\uffdf\026\uffdf\027\uffdf" +
    "\036\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\046\uffdf\001\002\000\036\005\112\006\116\007\111" +
    "\010\110\011\104\012\115\013\102\014\103\015\107\016" +
    "\106\017\105\020\117\021\114\031\163\001\002\000\030" +
    "\004\uffdd\026\uffdd\027\uffdd\036\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\001\002\000\030" +
    "\004\uffde\026\uffde\027\uffde\036\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\001\002\000\006" +
    "\030\023\031\ufff9\001\002\000\004\024\167\001\002\000" +
    "\010\004\uffef\025\ufff1\030\uffef\001\002\000\004\025\171" +
    "\001\002\000\004\026\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\004\002\003\001\001\000\014\003\010\004" +
    "\004\007\015\010\014\011\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\017\001" +
    "\001\000\004\006\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\026\013\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\041\001\001\000\030" +
    "\004\057\007\043\014\045\016\062\017\047\020\051\021" +
    "\050\022\044\023\042\024\053\025\046\001\001\000\002" +
    "\001\001\000\004\005\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\075\030\161\031" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\075\030\145\031\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\075\030\067\031\065\001\001\000" +
    "\006\025\075\031\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\075\030\140\031" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\075\031\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\075\026\077\030\100\031\065\001\001" +
    "\000\002\001\001\000\004\027\112\001\001\000\010\025" +
    "\075\030\135\031\065\001\001\000\010\025\075\030\134" +
    "\031\065\001\001\000\010\025\075\030\133\031\065\001" +
    "\001\000\010\025\075\030\132\031\065\001\001\000\010" +
    "\025\075\030\131\031\065\001\001\000\010\025\075\030" +
    "\130\031\065\001\001\000\010\025\075\030\127\031\065" +
    "\001\001\000\010\025\075\030\126\031\065\001\001\000" +
    "\010\025\075\030\125\031\065\001\001\000\002\001\001" +
    "\000\010\025\075\030\122\031\065\001\001\000\010\025" +
    "\075\030\121\031\065\001\001\000\010\025\075\030\120" +
    "\031\065\001\001\000\010\025\075\030\117\031\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\025\075\030\124\031\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\057\007\043\014\045" +
    "\016\143\017\047\020\051\021\050\022\044\023\042\024" +
    "\053\025\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\057\007\043\014\045\016" +
    "\147\017\047\020\051\021\050\022\044\023\042\024\053" +
    "\025\046\001\001\000\002\001\001\000\030\004\057\007" +
    "\043\014\045\016\151\017\047\020\051\021\050\022\044" +
    "\023\042\024\053\025\046\001\001\000\002\001\001\000" +
    "\010\025\075\030\153\031\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\075\026\156\030\100\031" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\023\001\001\000\002\001\001\000\006" +
    "\012\167\013\027\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_basica ::= chamada_func 
            {
              Expressao RESULT =null;
		int chfuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chfuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChamadaFunc chfunc = (ChamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         	RESULT = chfunc;
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_basica ::= IDENTIFICADOR 
            {
              Expressao RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         	RESULT = new ExprIdentificador(id);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_basica ::= FLOAT_LITERAL 
            {
              Expressao RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         	float valor = Float.parseFloat(f);
         	RESULT = new FloatLiteral(valor);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_basica ::= CHAR_LITERAL 
            {
              Expressao RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         	RESULT = new CharLiteral(car);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_basica ::= INT_LITERAL 
            {
              Expressao RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
         	 int valor = Integer.parseInt(i); 
             RESULT = new IntLiteral(valor);    
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_basica ::= MENOS expr_basica 
            {
              Expressao RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao expb = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
             	RESULT = new ExprUnaria(o, expb) ;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_basica ::= NAO expr_basica 
            {
              Expressao RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao expb = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
             	RESULT = new ExprUnaria(o, expb) ;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_basica ::= ABRE_PARENTESE expressao FECHA_PARENTESE 
            {
              Expressao RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
             	RESULT = exp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressao ::= expr_basica 
            {
              Expressao RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expressao ::= expressao MAIOR_QUE expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expressao ::= expressao MAIOR_OU_IGUAL_QUE expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao ::= expressao MENOR_OU_IGUAL_QUE expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao ::= expressao MENOR_QUE expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao ::= expressao DIFERENTE expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao ::= expressao IGUAL expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressao ::= expressao OU expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressao ::= expressao E expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressao ::= expressao RESTO expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressao ::= expressao DIVIDIDO expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressao ::= expressao VEZES expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressao ::= expressao MENOS expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressao ::= expressao MAIS expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExprAritmetica(e1,e2,o);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // resto_lista_exprs ::= 
            {
              LinkedList<Expressao> RESULT =null;
		
              				RESULT = new LinkedList<Expressao>();
              			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_lista_exprs",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // resto_lista_exprs ::= resto_lista_exprs VIRGULA expressao 
            {
              LinkedList<Expressao> RESULT =null;
		int rlexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rlexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expressao> rlexp = (LinkedList<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						rlexp.addLast(exp);
						RESULT = rlexp;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_lista_exprs",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_exprs ::= 
            {
              LinkedList<Expressao> RESULT =null;
		
              	RESULT = new LinkedList<Expressao>();
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_exprs",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_exprs ::= expressao resto_lista_exprs 
            {
              LinkedList<Expressao> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rlexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rlexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expressao> rlexp = (LinkedList<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					rlexp.addLast(exp);
					RESULT = rlexp;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_exprs",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // chamada_func ::= IDENTIFICADOR ABRE_PARENTESE lista_exprs FECHA_PARENTESE 
            {
              ChamadaFunc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expressao> lexp = (LinkedList<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new ChamadaFunc(id, lexp);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_func",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // retorno ::= RETORNAR expressao PONTO_VIRGULA 
            {
              Retorno RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new Retorno(exp);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // chamada_func_cmd ::= chamada_func PONTO_VIRGULA 
            {
              ChamadaFunc RESULT =null;
		int chfuncomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int chfuncomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ChamadaFunc chfuncom = (ChamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = chfuncom;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_func_cmd",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // escrita ::= PRINTAR ABRE_PARENTESE lista_exprs FECHA_PARENTESE PONTO_VIRGULA 
            {
              Escrita RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expressao> lexp = (LinkedList<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
					RESULT = new Escrita(lexp);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escrita",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // decisao ::= SE expressao ENTAO comando 
            {
              Decisao RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int comIfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comIfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando comIf = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Decisao(exp, comIf);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decisao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decisao ::= SE expressao ENTAO comando SENAO comando 
            {
              Decisao RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int comIfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int comIfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Comando comIf = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int comElseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comElseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando comElse = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Decisao(exp, comIf, comElse);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decisao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iteracao ::= ENQUANTO ABRE_PARENTESE expressao FECHA_PARENTESE comando 
            {
              Iteracao RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando com = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Iteracao(exp, com);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteracao",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // atribuicao ::= IDENTIFICADOR ATRIBUICAO expressao PONTO_VIRGULA 
            {
              Atribuicao RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   
               		RESULT = new Atribuicao(id, exp);   
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comando ::= chamada_func_cmd 
            {
              Comando RESULT =null;
		int chfuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chfuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChamadaFunc chfunc = (ChamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = chfunc;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comando ::= bloco 
            {
              Comando RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Bloco bl = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = bl;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comando ::= retorno 
            {
              Comando RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Retorno ret = (Retorno)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = ret;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comando ::= escrita 
            {
              Comando RESULT =null;
		int escleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int escright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Escrita esc = (Escrita)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = esc;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando ::= decisao 
            {
              Comando RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decisao dec = (Decisao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = dec;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comando ::= iteracao 
            {
              Comando RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Iteracao it = (Iteracao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = it;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comando ::= atribuicao 
            {
              Comando RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Atribuicao atr = (Atribuicao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = atr;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comando ::= decl_variavel 
            {
              Comando RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclVariavel v = (DeclVariavel)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = v;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_comandos ::= 
            {
              LinkedList<Comando> RESULT =null;
		
 						RESULT = new LinkedList<Comando>();	
 					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_comandos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_comandos ::= lista_comandos comando 
            {
              LinkedList<Comando> RESULT =null;
		int lcomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Comando> lcom = (LinkedList<Comando>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando com = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						lcom.addLast(com);
						RESULT = lcom;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_comandos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloco ::= ABRE_CHAVE lista_comandos FECHA_CHAVE 
            {
              Bloco RESULT =null;
		int lcomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Comando> lcom = (LinkedList<Comando>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Bloco(lcom);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // resto_param_formais ::= 
            {
              LinkedList<DeclVariavel> RESULT =null;
		
							RESULT = new LinkedList<DeclVariavel>();
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_param_formais",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // resto_param_formais ::= resto_param_formais VIRGULA IDENTIFICADOR DOIS_PONTOS 
            {
              LinkedList<DeclVariavel> RESULT =null;
		int rparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<DeclVariavel> rparam = (LinkedList<DeclVariavel>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							rparam.addLast(new DeclVariavel(id, t));
							RESULT = rparam;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_param_formais",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param_formais ::= 
            {
              LinkedList<DeclVariavel> RESULT =null;
		
						RESULT = new LinkedList<DeclVariavel>();
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_formais",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param_formais ::= resto_param_formais IDENTIFICADOR DOIS_PONTOS tipo 
            {
              LinkedList<DeclVariavel> RESULT =null;
		int rparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<DeclVariavel> rparam = (LinkedList<DeclVariavel>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						rparam.addLast(new DeclVariavel(id, t));
						RESULT = rparam;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_formais",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // assinatura ::= VOID IDENTIFICADOR ABRE_PARENTESE param_formais FECHA_PARENTESE 
            {
              Assinatura RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Tipo v = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<DeclVariavel> p = (LinkedList<DeclVariavel>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Assinatura(id, p, v);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assinatura",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // assinatura ::= tipo IDENTIFICADOR ABRE_PARENTESE param_formais FECHA_PARENTESE 
            {
              Assinatura RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<DeclVariavel> p = (LinkedList<DeclVariavel>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new Assinatura(id,p,t);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assinatura",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl_funcao ::= assinatura bloco 
            {
              DeclFuncao RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Assinatura ass = (Assinatura)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Bloco bl = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new DeclFuncao(ass, bl);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcao",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= PONTO_FLUTUANTE 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.FLOAT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= CARACTERE 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.CHAR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= INTEIRO 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.INT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // resto_lista_idents ::= 
            {
              LinkedList<String> RESULT =null;
		
							RESULT = new LinkedList<String>();
                    	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_lista_idents",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // resto_lista_idents ::= VIRGULA IDENTIFICADOR resto_lista_idents 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rlidsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rlidsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> rlids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						rlids.addLast(id);
						RESULT = rlids;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_lista_idents",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_idents ::= IDENTIFICADOR resto_lista_idents 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rlidsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rlidsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> rlids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					rlids.addLast(id);
					RESULT = rlids;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_idents",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_variavel ::= tipo lista_idents PONTO_VIRGULA 
            {
              DeclVariavel RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> lid = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
               		RESULT = new DeclVariavel(lid, t);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variavel",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_global ::= decl_funcao 
            {
              DeclGlobal RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclFuncao df = (DeclFuncao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    
					RESULT = df;   
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_global ::= decl_variavel 
            {
              DeclGlobal RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclVariavel dv = (DeclVariavel)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    
					RESULT = dv;  
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= 
            {
              Programa RESULT =null;
		 RESULT = new Programa();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= programa decl_global 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclGlobal d = (DeclGlobal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 p.addLast(d); RESULT = p ;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

