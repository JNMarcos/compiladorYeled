package compiler.syntax;

import java_cup.runtime.*;
import java.util.*;
import compiler.tree.*;
import compiler.tree.expressao.*;
import compiler.tree.comando.*;

/*****  Terminais (tokens) *****/

terminal String IDENTIFICADOR;
    
terminal Object    IGUAL_QUE;
terminal Object    DIFERENTE_QUE;
terminal Object    MAIOR_QUE;
terminal Object    MENOR_QUE;
terminal Object    MAIOR_OU_IGUAL;
terminal Object    MENOR_OU_IGUAL;
    
terminal Object    SOMA;
terminal Object    SUB;
terminal Object    MULT;
terminal Object    DIV;
terminal Object    RESTO;
terminal Object    AND;
terminal Object    OR;
terminal Object    NOT;
    
terminal Object    ATRIBUICAO;
    
terminal Object    ABRE_PAR;
terminal Object    FECHA_PAR;
terminal Object    ABRE_CHAVE;
terminal Object    FECHA_CHAVE;
terminal Object    VIRGULA;
terminal Object    PONTO_VIRGULA;
terminal Object    DOIS_PONTOS;
    
terminal String    INT_LITERAL;
terminal String    FLOAT_LITERAL;
terminal String    CHAR_LITERAL;
    
terminal Object    KEY_IF;
terminal Object    KEY_THEN;
terminal Object    KEY_ELSE;
terminal Object    KEY_WHILE;
terminal Object    KEY_RETURN;
terminal Object    KEY_INT;
terminal Object    KEY_FLOAT;
terminal Object    KEY_CHAR;
terminal Object    KEY_PRINT;
terminal Object    KEY_VOID;


/***** Nao-terminais *****/

non terminal 	Programa				programa;
non terminal 	DeclGlobal				decl_global;
non terminal 	DeclVariavel			decl_variavel;
non terminal 	LinkedList<String>		lista_idents;
non terminal 	LinkedList<String>		resto_lista_idents;
non terminal 	Tipo					tipo;
non terminal 	DeclFuncao				decl_funcao;
non terminal 	Assinatura				assinatura;
non terminal 	LinkedList<DeclVariavel> param_formais;
non terminal 	LinkedList<DeclVariavel> resto_param_formais;
non terminal 	Bloco					bloco;
non terminal 	LinkedList<Comando>		lista_comandos;
non terminal	Comando					comando;
non terminal 	Atribuicao				atribuicao;
non terminal 	Iteracao				iteracao;
non terminal	Decisao					decisao;
non terminal 	Escrita					escrita;
non terminal 	ChamadaFunc				chamada_func_cmd;
non terminal 	Retorno					retorno;
non terminal 	ChamadaFunc				chamada_func;
non terminal	LinkedList<Expressao>	lista_exprs;
non terminal 	LinkedList<Expressao>	resto_lista_exprs;
non terminal 	Expressao 				expressao;
non terminal	Expressao 				expr_basica;


/***** Precedencia e associatividade *****/

precedence left OR, AND; //simbolos de menor precedencia
precedence left IGUAL_QUE, DIFERENTE_QUE, MAIOR_QUE, MENOR_QUE, MAIOR_OU_IGUAL, MENOR_OU_IGUAL;
precedence left SOMA, SUB;     
precedence left MULT, DIV, RESTO;   
precedence left NOT;     //simbolo de maior precedencia


/***** A gramatica *****/

programa ::= programa:p decl_global:d
			{: p.addLast(d); RESULT = p ;  :}
			 
		  |  /* vazio */
		  {: RESULT = new Programa();  :}
          ;


decl_global ::= decl_variavel:dv
				{:    
					RESULT = dv;  
				:}
            | decl_funcao:df
				{:    
					RESULT = df;   
				:}
            ;
            
            
decl_variavel ::= tipo:t lista_idents:lid PONTO_VIRGULA
               {:
               		RESULT = new DeclVariavel(lid, t);
               :}
               ;


lista_idents ::= IDENTIFICADOR resto_lista_idents 
             ;


resto_lista_idents ::=  VIRGULA IDENTIFICADOR resto_lista_idents

                     |  /* vazio */

                     ;

tipo ::= KEY_INT
			 {: RESULT = Tipo.INT; :}
		| KEY_CHAR 
			{: RESULT = Tipo.CHAR; :}
		| KEY_FLOAT 
			{: RESULT = Tipo.FLOAT; :}
		;
		
decl_funcao ::= assinatura bloco 
				;
		
assinatura ::= tipo IDENTIFICADOR ABRE_PAR param_formais FECHA_PAR
				
             | KEY_VOID IDENTIFICADOR ABRE_PAR param_formais FECHA_PAR

             ;
             

param_formais ::= IDENTIFICADOR DOIS_PONTOS tipo resto_param_formais

                | /*vazio*/

                ;	
                	
		
resto_param_formais ::= VIRGULA IDENTIFICADOR DOIS_PONTOS tipo resto_param_formais
						
                      | /*vazio*/

                      ; 
                      		
		
bloco ::= ABRE_CHAVE lista_comandos FECHA_CHAVE 

			;		
			
		
lista_comandos ::= lista_comandos comando

				   | /*vazio*/
 
                 ;		
                 
		
comando  ::= decl_variavel

           | atribuicao

           | iteracao
      
           | decisao 

           | escrita

           | retorno

           | bloco

           | chamada_func_cmd

           ;
           
           
atribuicao ::= IDENTIFICADOR:id ATRIBUICAO expressao:exp PONTO_VIRGULA 
               {:   
               		RESULT = new Atibuicao(id,exp);   
               :}
				;    
				       
           
iteracao ::= KEY_WHILE ABRE_PAR expressao FECHA_PAR comando 

			; 
           
           
decisao ::= KEY_IF expressao KEY_THEN comando KEY_ELSE comando

            | KEY_IF expressao KEY_THEN comando

            ;
   

escrita ::= KEY_PRINT ABRE_PAR expressao FECHA_PAR PONTO_VIRGULA 

			;           


chamada_func_cmd ::= chamada_func PONTO_VIRGULA 

					;

					
retorno ::= KEY_RETURN expressao PONTO_VIRGULA 

			;

			
chamada_func ::= IDENTIFICADOR ABRE_PAR lista_exprs FECHA_PAR 

				;

			
lista_exprs ::= expressao resto_lista_exprs
				
              | /*vazio*/

              ; 
			
			
resto_lista_exprs ::= resto_lista_exprs VIRGULA expressao
					
                    | /*vazio*/

                    ;
			
			
expressao ::= expressao SOMA expressao
        
        | expressao SUB expressao
        
        | expressao MULT expressao
        
        | expressao DIV expressao
        
        | expressao RESTO expressao
        
        | expressao AND expressao
        
        | expressao OR expressao
        
        | expressao IGUAL_QUE expressao
        
        | expressao DIFERENTE_QUE expressao
        
        | expressao MENOR_QUE expressao
        
        | expressao MENOR_OU_IGUAL expressao
        
        | expressao MAIOR_OU_IGUAL expressao
        
        | expressao MAIOR_QUE expressao
        
        | expr_basica

        ;


expr_basica ::= ABRE_PAR expressao FECHA_PAR 
             
         | NOT expr_basica

         | SUB expr_basica
         
         | INT_LITERAL:lexeme
         {:  int valor = Integer.parseInt(lexeme); 
             RESULT = new IntLiteral(valor);    :}
         
         | CHAR_LITERAL
         
         | FLOAT_LITERAL
         
         | IDENTIFICADOR
         
         | chamada_func
         
         ;
         