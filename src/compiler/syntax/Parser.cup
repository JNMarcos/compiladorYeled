package compiler.syntax;

import java_cup.runtime.*;
import java.util.*;
import compiler.tree.*;
import compiler.tree.expressao.*;
import compiler.tree.comando.*;

/*****  Terminais (tokens) *****/

terminal String IDENTIFICADOR;
    
terminal String    IGUAL;
terminal String    DIFERENTE;
terminal String    MAIOR_QUE;
terminal String    MENOR_QUE;
terminal String    MAIOR_OU_IGUAL_QUE;
terminal String    MENOR_OU_IGUAL_QUE;
    
terminal String    MAIS;
terminal String    MENOS;
terminal String    VEZES;
terminal String    DIVIDIDO;
terminal String    RESTO;
terminal String    E;
terminal String    OU;
terminal String    NAO;
    
terminal String    ATRIBUICAO;
    
terminal String    ABRE_PARENTESE;
terminal String    FECHA_PARENTESE;
terminal String    ABRE_CHAVE;
terminal String    FECHA_CHAVE;
terminal String    VIRGULA;
terminal String    PONTO_VIRGULA;
terminal String    DOIS_PONTOS;
    
terminal String    INT_LITERAL;
terminal String    FLOAT_LITERAL;
terminal String    CHAR_LITERAL;
    
terminal Object    SE;
terminal Object    ENTAO;
terminal Object    SENAO;
terminal Object    ENQUANTO;
terminal Object    RETORNAR;
terminal Tipo      INTEIRO;
terminal Tipo      PONTO_FLUTUANTE;
terminal Tipo      CARACTERE;
terminal Object    PRINTAR;
terminal Tipo      VOID;


/***** Nao-terminais *****/

non terminal 	Programa				programa;
non terminal 	DeclGlobal				decl_global;
non terminal 	DeclVariavel			decl_variavel;
non terminal 	LinkedList<String>		lista_idents;
non terminal 	LinkedList<String>		resto_lista_idents;
non terminal 	Tipo					tipo;
non terminal 	DeclFuncao				decl_funcao;
non terminal 	Assinatura				assinatura;
non terminal 	LinkedList<DeclVariavel> param_formais;
non terminal 	LinkedList<DeclVariavel> resto_param_formais;
non terminal 	Bloco					bloco;
non terminal 	LinkedList<Comando>		lista_comandos;
non terminal	Comando					comando;
non terminal 	Atribuicao				atribuicao;
non terminal 	Iteracao				iteracao;
non terminal	Decisao					decisao;
non terminal 	Escrita					escrita;
non terminal 	ChamadaFunc				chamada_func_cmd;
non terminal 	Retorno					retorno;
non terminal 	ChamadaFunc				chamada_func;
non terminal	LinkedList<Expressao>	lista_exprs;
non terminal 	LinkedList<Expressao>	resto_lista_exprs;
non terminal 	Expressao 				expressao;
non terminal	Expressao 				expr_basica;


/***** Precedencia e associatividade *****/

precedence left OU, E; //simbolos de menor precedencia
precedence left IGUAL, DIFERENTE, MAIOR_QUE, MENOR_QUE, MAIOR_OU_IGUAL_QUE, MENOR_OU_IGUAL_QUE;
precedence left MAIS, MENOS;     
precedence left VEZES, DIVIDIDO, RESTO;   
precedence left NAO;     //simbolo de maior precedencia


/***** A gramatica *****/

programa ::= programa:p decl_global:d
			{: p.addLast(d); RESULT = p ;  :}
			 
		  |  /* vazio */
		  {: RESULT = new Programa();  :}
          ;


decl_global ::= decl_variavel:dv
				{:    
					RESULT = dv;  
				:}
            | decl_funcao:df
				{:    
					RESULT = df;   
				:}
            ;
            
            
decl_variavel ::= tipo:t lista_idents:lid PONTO_VIRGULA
               {:
               		RESULT = new DeclVariavel(lid, t);
               :}
               ;


lista_idents ::= IDENTIFICADOR:id resto_lista_idents:rlids
				{:
					rlids.addLast(id);
					RESULT = rlids;
				:} 
             ;


resto_lista_idents ::=  VIRGULA IDENTIFICADOR:id resto_lista_idents:rlids
					{:
						rlids.addLast(id);
						RESULT = rlids;
					:}
                     |  /* vazio */
						{:
							RESULT = new LinkedList<String>();
                    	:}
                     ;

tipo ::= INTEIRO
			 {: RESULT = Tipo.INT; :}
		| CARACTERE
			{: RESULT = Tipo.CHAR; :}
		| PONTO_FLUTUANTE
			{: RESULT = Tipo.FLOAT; :}
		;
		
decl_funcao ::= assinatura:ass bloco:bl
			{:
				RESULT = new DeclFuncao(ass, bl);
			:} 
			;
		
assinatura ::= tipo:t IDENTIFICADOR:id ABRE_PARENTESE param_formais:p FECHA_PARENTESE
				{:
					RESULT = new Assinatura(id,p,t);
				:}
             | VOID:v IDENTIFICADOR:id ABRE_PARENTESE param_formais:p FECHA_PARENTESE
				{:
					RESULT = new Assinatura(id, p, v);
				:}
             ;
             

param_formais ::= resto_param_formais:rparam IDENTIFICADOR:id DOIS_PONTOS tipo:t
					{:
						rparam.addLast(new DeclVariavel(id, t));
						RESULT = rparam;
					:}
                | /*vazio*/
					{:
						RESULT = new LinkedList<DeclVariavel>();
					:}
                ;	
                	
		
resto_param_formais ::= resto_param_formais:rparam VIRGULA IDENTIFICADOR:id DOIS_PONTOS 
						{:
							rparam.addLast(new DeclVariavel(id, t));
							RESULT = rparam;
						:}
                      | /*vazio*/
						{:
							RESULT = new LinkedList<DeclVariavel>();
						:}
                      ; 
                      		
		
bloco ::= ABRE_CHAVE lista_comandos:lcom FECHA_CHAVE 
				{:
					RESULT = new Bloco(lcom);
				:}
			;		
			
		
lista_comandos ::= lista_comandos:lcom comando:com
					{:
						lcom.addLast(com);
						RESULT = lcom;
					:}
				   | /*vazio*/
 					{:
 						RESULT = new LinkedList<Comando>();	
 					:}
                 ;		
                 
		
comando  ::= decl_variavel:v
			{:
				RESULT = v;
			:}
           | atribuicao:atr
			{:
				RESULT = atr;
			:}
           | iteracao:it
      		{:
				RESULT = it;
			:}
           | decisao:dec
			{:
				RESULT = dec;
			:}
           | escrita:esc
			{:
				RESULT = esc;
			:}
           | retorno:ret
			{:
				RESULT = ret;
			:}
           | bloco:bl
			{:
				RESULT = bl;
			:}
           | chamada_func_cmd:chfunc
			{:
				RESULT = chfunc;
			:}
           ;
           
           
atribuicao ::= IDENTIFICADOR:id ATRIBUICAO expressao:exp PONTO_VIRGULA 
               {:   
               		RESULT = new Atibuicao(id, exp);   
               :}
				;    
				       
           
iteracao ::= ENQUANTO ABRE_PARENTESE expressao:exp FECHA_PARENTESE comando:com 
				{:
					RESULT = new Iteracao(exp, com);
				:}
			; 
           
           
decisao ::= SE expressao:exp ENTAO comando:comIf SENAO comando:comElse
				{:
					RESULT = new Decisao(exp, comIf, comElse);
				:}
            | SE expressao:exp ENTAO comando:comIf
				{:
					RESULT = new Decisao(exp, comIf);
				:}
            ;
   

escrita ::= PRINTAR ABRE_PARENTESE lista_exprs:lexp FECHA_PARENTESE PONTO_VIRGULA 
			{:
					RESULT = new Escrita(lexp);
			:}
			;           


chamada_func_cmd ::= chamada_func:chfuncom PONTO_VIRGULA 
			{:
				RESULT = chfuncom;
			:}
			;

					
retorno ::= RETORNAR expressao:exp PONTO_VIRGULA 
			{:
				RESULT = new Retorno(exp);
			:}
			;

			
chamada_func ::= IDENTIFICADOR:id ABRE_PARENTESE lista_exprs:lexp FECHA_PARENTESE 
			{:
				RESULT = new ChamadaFunc(id, lexp);
			:}
				;

			
lista_exprs ::= expressao:exp resto_lista_exprs:rlexp
				{:
					rlexp.addLast(exp);
					RESULT = rlexp;
				:}
              | /*vazio*/  
              {:
              	RESULT = new LinkedList<Expressao>();
              :}
              ; 
			
			
resto_lista_exprs ::= resto_lista_exprs:rlexp VIRGULA expressao:exp
					{:
						rlexp.addLast(exp);
						RESULT = rlexp;
					:}
                    | /*vazio*/
						{:
              				RESULT = new LinkedList<Expressao>();
              			:}
                    ;
			
			
expressao ::= expressao:e1 MAIS:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expressao:e1 MENOS:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expressao:e1 VEZES:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expressao:e1 DIVIDIDO:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expressao:e1 RESTO:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expressao:e1 E:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expressao:e1 OU:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expressao:e1 IGUAL:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expressao:e1 DIFERENTE:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expressao:e1 MENOR_QUE:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expressao:e1 MENOR_OU_IGUAL_QUE:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expressao:e1 MAIOR_OU_IGUAL_QUE:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expressao:e1 MAIOR_QUE:o expressao:e2
        	{:RESULT = new ExprAritmetica(e1,e2,o);:}
        | expr_basica:exp
			{: RESULT = exp;:}
        ;


expr_basica ::= ABRE_PARENTESE expressao:exp FECHA_PARENTESE
            {:
             	RESULT = exp;
            :}
         | NAO:o expr_basica:expb
			{:
             	RESULT = new ExprUnaria(o, expb) ;
            :}
         | MENOS:o expr_basica:expb
         	{:
             	RESULT = new ExprUnaria(o, expb) ;
            :}
         | INT_LITERAL:i
         {:  
         	 int valor = Integer.parseInt(i); 
             RESULT = new IntLiteral(valor);    
          :}
         | CHAR_LITERAL:car
         {:
         	RESULT = new CharLiteral(car);
         :}
         | FLOAT_LITERAL:f
         {:
         	float valor = Float.parseFloat(f);
         	RESULT = new FloatLiteral(valor);
         :}
         | IDENTIFICADOR:id
         {:
         	RESULT = new ExprIdentificador(id);
         :}
         | chamada_func:chfunc
         {:
         	RESULT = chfunc;
         :}
         ;
         